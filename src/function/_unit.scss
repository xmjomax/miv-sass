@charset "UTF-8";


$base-font-size:          24                         !default;  //html 根元素字号
$baseSize:                $base-font-size * 1px      !default;


//去掉一个值的单位，如12px => 12

@function strip-units($number){
  @return $number / ($number * 0 + 1);
}

//将px转换成em
//当元素的父元素没有重置字体大小时，相对于16px计算，如果你要将12px转换成em时，可以写成`pxToem(12px)`
//当元素的父元素重置了字体大小时，如24px，如果你要将12px转换成em时,可以写成`pxToem(12px,24px)`
//另外你还可以不显式的写也单位`px`

@function pxToem($target-size,$size:$base-font-size){
  @if not unitless($target-size){//unitless(12)=>true,unitless(12px)=>false
    $target-size: strip-units($target-size);//去掉 $target-size单位
  }
  @if not unitless($size){
    $size: strip-units($size);//去掉 $size单位
  }
  @return ($target-size / $size) * 1em;
}

//将px转换成rem 和上面一样

@function pxTorem($target-size,$size:$base-font-size){
  @if not unitless($target-size){//unitless(12)=>true,unitless(12px)=>false
    $target-size: strip-units($target-size);//去掉 $target-size单位
  }
  @if not unitless($size){
    $size: strip-units($size);//去掉 $size单位
  }
  @return ($target-size / $size) * 1rem;
}

// 复杂 em 使用方法:
// SCSS:
//.header {
//    @include emCalc(line-height, 30, 16);
//    @include emCalc(width height, 125);
//    @include emCalc(padding, 0 25, 16);
//    @include emCalc(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
//    @include emCalc(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
//}
//
// CSS:
//.header {
//  line-height: 1.875em;
//  width: 7.8125em;
//  height: 7.8125em;
//  padding: 0em 1.5625em;
//  text-shadow: #0d6e28 0.0625em 0.0625em, #777777 0em 0em 0.125em;
//  box-shadow: inset 0em 0em 0em 0.0625em #2a9022, inset 0em 0em 0.1875em #459966; }


@mixin emCalc($props,$sizes,$base:$base-font-size){
  $values: ();
  $sublists: false;

  @each $s in $sizes {
    //循环列表中多个属性值，例如text-shadow属性
    @if type-of($s) == list {
      $sublists: true;
      $vv: ();
      @each $ss in $s {
        $vv: append($vv,if(type-of($ss) == number, #{$ss / $base}em, $ss));
      }
      $values: append($values,join((), $vv));
    }
    @else {
      $values: append($values,if(type-of($s) == number, #{$s / $base}em, $s));
    }
  }
  $value: join((), $values, if($sublists,comma,space));
  @each $prop in $props {#{$prop}: $value}
}

// 复杂 rem 使用方法: 和上面的 em 一样

@mixin remCalc($props,$sizes,$base:$base-font-size){
  $values: ();
  $sublists: false;

  @each $s in $sizes {
    //循环列表中多个属性值，例如text-shadow属性
    @if type-of($s) == list {
      $sublists: true;
      $vv: ();
      @each $ss in $s {
        $vv: append($vv,if(type-of($ss) == number, #{$ss / $base}rem, $ss));
      }
      $values: append($values,join((), $vv));
    }
    @else {
      $values: append($values,if(type-of($s) == number, #{$s / $base}rem, $s));
    }
  }
  $value: join((), $values, if($sublists,comma,space));
  @each $prop in $props {#{$prop}: $value}
}